#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>

Adafruit_PWMServoDriver servos = Adafruit_PWMServoDriver(0x40);

unsigned int pos0 = 172;   // ancho de pulso en cuentas para pocicion 0°
unsigned int pos180 = 565; // ancho de pulso en cuentas para la pocicion 180°

/*
  int myInts[6];
  int myPins[] = {2, 4, 8, 3, 6};
  int mySensVals[5] = {2, 4, -8, 3, 2};
  char message[6] = "hello";
*/

int MIN_ang[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int MAX_ang[] = {180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180};
int duty;

#define FEMUR_FL 2
#define FEMUR_FR 4
#define FEMUR_BL 11
#define FEMUR_BR 13
#define TIBIA_FL 3
#define TIBIA_FR 5
#define TIBIA_BL 12
#define TIBIA_BR 14
#define NECK_PITCH 0
#define NECK_YAW 1
#define TAIL 15

const int todos[] = {FEMUR_FL, FEMUR_FR, FEMUR_BL, FEMUR_BR, TIBIA_FL, TIBIA_FR, TIBIA_BL, TIBIA_BR, NECK_PITCH, NECK_YAW, TAIL};
const int femurs[] = {FEMUR_FL, FEMUR_FR, FEMUR_BL, FEMUR_BR};
const int tibias[] = {TIBIA_FL, TIBIA_FR, TIBIA_BL, TIBIA_BR};

int pos_femur[] = {-66, -66, -66, -66, -66, -66, -66, -66, -65, -64, -63, -61, -58, -56, -52, -49, -45, -41, -37, -32, -28, -23, -19, -15, -11, -8, -5, -2, 0, 2, 4, 5, 5, 2, -5, -16, -29, -43, -55, -63, -67, -68, -67, -66, -66, -66, -66, -66, -66, -66, -66, -65, -64, -63, -61, -58, -56, -52, -49, -45, -41, -37, -32, -28, -23, -19, -15, -11, -8, -5, -2, 0, 2, 4, 5, 5, 2, -5, -16, -29, -43, -55, -63, -67, -68, -67, -66, -66, -66, -66, -66, -66, -66, -66, -65, -64, -63, -61, -58, -56, -52, -49, -45, -41, -37, -32, -28, -23, -19, -15, -11, -8, -5, -2, 0, 2, 4, 5, 5, 2, -5, -16, -29, -43, -55, -63, -67, -68, -67, -66, -66, -66, -66, -66, -66, -66, -66, -65, -64, -63, -61, -58, -56, -52, -49, -45, -41, -37, -32, -28, -23, -19, -15, -11, -8, -5, -2, 0, 2, 4, 5, 5, 2, -5, -16, -29, -43, -55, -63, -67, -68, -67};
int pos_tibia[] = {-23, -19, -15, -11, -8, -5, -2, 0, 2, 4, 5, 5, 2, -5, -16, -29, -43, -55, -63, -67, -68, -67, -66, -66, -66, -66, -66, -66, -66, -66, -65, -64, -63, -61, -58, -56, -52, -49, -45, -41, -37, -32, -28, -23, -19, -15, -11, -8, -5, -2, 0, 2, 4, 5, 5, 2, -5, -16, -29, -43, -55, -63, -67, -68, -67, -66, -66, -66, -66, -66, -66, -66, -66, -65, -64, -63, -61, -58, -56, -52, -49, -45, -41, -37, -32, -28, -23, -19, -15, -11, -8, -5, -2, 0, 2, 4, 5, 5, 2, -5, -16, -29, -43, -55, -63, -67, -68, -67, -66, -66, -66, -66, -66, -66, -66, -66, -65, -64, -63, -61, -58, -56, -52, -49, -45, -41, -37, -32, -28, -23, -19, -15, -11, -8, -5, -2, 0, 2, 4, 5, 5, 2, -5, -16, -29, -43, -55, -63, -67, -68, -67, -66, -66, -66, -66, -66, -66, -66, -66, -65, -64, -63, -61, -58, -56, -52, -49, -45, -41, -37, -32, -28};

void setup()
{
  Serial.begin(9600);
  servos.begin();
  servos.setPWMFreq(60); // Frecuecia PWM de 60Hz o T=16,66ms
}

void moverservo(uint8_t nmotor, int ang)
{

  // check limits ang
  /*if (ang < MIN_ang[nmotor])
  {
    ang = MIN_ang[nmotor];
  }
  else if (ang > MAX_ang[nmotor])
  {
    ang = MAX_ang[nmotor];
  }
*/
  duty = map(ang, 0, 180, pos0, pos180);
  servos.setPWM(nmotor, 0, duty);
}

void home()
{
  for (int i = 0; i < sizeof(todos) / sizeof(todos[0]); i++)
  {
    moverservo(todos[i], 80);
    delay(100);
  }
}

void pata()
{
  const uint8_t pos_femur_fr[] = {66, 66, 66, 66, 66, 66, 66, 66, 65, 64, 63, 61, 58, 56, 52, 49, 45, 41, 37, 32, 28, 23, 19, 15, 11, 8, 5, 2, 0, 0, 0, 0, 0, 0, 5, 16, 29, 43, 55, 63, 67, 68, 67, 66, 66, 66, 66, 66, 66, 66, 66, 65, 64, 63, 61, 58, 56, 52, 49, 45, 41, 37, 32, 28, 23, 19, 15, 11, 8, 5, 2, 0, 0, 0, 0, 0, 0, 5, 16, 29, 43, 55, 63, 67, 68, 67, 66, 66, 66, 66, 66, 66, 66, 66, 65, 64, 63, 61, 58, 56, 52, 49, 45, 41, 37, 32, 28, 23, 19, 15, 11, 8, 5, 2, 0, 0, 0, 0, 0, 0, 5, 16, 29, 43, 55, 63, 67, 68, 67, 66, 66, 66, 66, 66, 66, 66, 66, 65, 64, 63, 61, 58, 56, 52, 49, 45, 41, 37, 32, 28, 23, 19, 15, 11, 8, 5, 2, 0, 0, 0, 0, 0, 0, 5, 16, 29, 43, 55, 63, 67, 68, 67};
  const uint8_t pos_tibia_fr[] = {113, 109, 105, 101, 98, 95, 92, 90, 88, 86, 85, 85, 88, 95, 106, 119, 133, 145, 153, 157, 158, 157, 156, 156, 156, 156, 156, 156, 156, 156, 155, 154, 153, 151, 148, 146, 142, 139, 135, 131, 127, 122, 118, 113, 109, 105, 101, 98, 95, 92, 90, 88, 86, 85, 85, 88, 95, 106, 119, 133, 145, 153, 157, 158, 157, 156, 156, 156, 156, 156, 156, 156, 156, 155, 154, 153, 151, 148, 146, 142, 139, 135, 131, 127, 122, 118, 113, 109, 105, 101, 98, 95, 92, 90, 88, 86, 85, 85, 88, 95, 106, 119, 133, 145, 153, 157, 158, 157, 156, 156, 156, 156, 156, 156, 156, 156, 155, 154, 153, 151, 148, 146, 142, 139, 135, 131, 127, 122, 118, 113, 109, 105, 101, 98, 95, 92, 90, 88, 86, 85, 85, 88, 95, 106, 119, 133, 145, 153, 157, 158, 157, 156, 156, 156, 156, 156, 156, 156, 156, 155, 154, 153, 151, 148, 146, 142, 139, 135, 131, 127, 122, 118};
  const uint8_t pos_femur_br[] = {95, 93, 91, 90, 89, 89, 89, 90, 91, 93, 95, 98, 101, 103, 106, 109, 112, 114, 116, 117, 118, 119, 114, 106, 97, 89, 85, 85, 91, 99, 109, 116, 119, 118, 117, 116, 114, 111, 108, 106, 103, 100, 97, 95, 93, 91, 90, 89, 89, 89, 90, 91, 93, 95, 98, 101, 103, 106, 109, 112, 114, 116, 117, 118, 119, 114, 106, 97, 89, 85, 85, 91, 99, 109, 116, 119, 118, 117, 116, 114, 111, 108, 106, 103, 100, 97, 95, 93, 91, 90, 89, 89, 89, 90, 91, 93, 95, 98, 101, 103, 106, 109, 112, 114, 116, 117, 118, 119, 114, 106, 97, 89, 85, 85, 91, 99, 109, 116, 119, 118, 117, 116, 114, 111, 108, 106, 103, 100, 97, 95, 93, 91, 90, 89, 89, 89, 90, 91, 93, 95, 98, 101, 103, 106, 109, 112, 114, 116, 117, 118, 119, 114, 106, 97, 89, 85, 85, 91, 99, 109, 116, 119, 118, 117, 116, 114, 111, 108, 106, 103, 100, 97};
  const uint8_t pos_tibia_br[] = {119, 114, 106, 97, 89, 85, 85, 91, 99, 109, 116, 119, 118, 117, 116, 114, 111, 108, 106, 103, 100, 97, 95, 93, 91, 90, 89, 89, 89, 90, 91, 93, 95, 98, 101, 103, 106, 109, 112, 114, 116, 117, 118, 119, 114, 106, 97, 89, 85, 85, 91, 99, 109, 116, 119, 118, 117, 116, 114, 111, 108, 106, 103, 100, 97, 95, 93, 91, 90, 89, 89, 89, 90, 91, 93, 95, 98, 101, 103, 106, 109, 112, 114, 116, 117, 118, 119, 114, 106, 97, 89, 85, 85, 91, 99, 109, 116, 119, 118, 117, 116, 114, 111, 108, 106, 103, 100, 97, 95, 93, 91, 90, 89, 89, 89, 90, 91, 93, 95, 98, 101, 103, 106, 109, 112, 114, 116, 117, 118, 119, 114, 106, 97, 89, 85, 85, 91, 99, 109, 116, 119, 118, 117, 116, 114, 111, 108, 106, 103, 100, 97, 95, 93, 91, 90, 89, 89, 89, 90, 91, 93, 95, 98, 101, 103, 106, 109, 112, 114, 116, 117, 118};
  for (int i = 0; i < sizeof(pos_femur)/2; i++)
  {
    moverservo(FEMUR_FR, pos_femur_fr[i]);
    moverservo(TIBIA_FR, pos_tibia_fr[i]);
    moverservo(FEMUR_BR, pos_femur_br[i]);
    moverservo(TIBIA_BR, pos_tibia_br[i]);
    delay(100);
  }
}

void loop()
{
  pata();
}
